<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- springmvc自动扫描的这些包下的对应注解 use-default-filters 是否自动扫描带有@Component、@Repository、@Service和@Controller的类 -->
    <context:component-scan base-package="com.he.spring.web" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    <!--处理静态资源 两者选其一都可以 mvc:resources更好点 <mvc:default-servlet-handler />
    -->
    <mvc:resources mapping="/static/**" location="/static/"/>
    <!--启用SpringMVC的注解功能 -->
    <mvc:annotation-driven/>
    <!--springmvc的是图解析器 -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="contentType" value="text/html; charset=UTF-8"/>
        <property name="prefix" value="/WEB-INF/view"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- <websocket:message-broker
             application-destination-prefix="/app">
         <websocket:stomp-endpoint path="/stomp">
             <websocket:sockjs />
         </websocket:stomp-endpoint>

         <websocket:stomp-broker-relay prefix="/topic,/queue"
                                       relay-host="127.0.0.1" relay-port="61613" heartbeat-receive-interval="20000"
                                       heartbeat-send-interval="20000" />

     </websocket:message-broker>-->

    <!--
    a.头部引入了「xmlns:websocket=“http://www.springframework.org/schema/websocket”」，websocket对应的命名空间
b.「<websocket:message-broker application-destination-prefix=“/app”>」标明以app开头的请求将被认为是websocket请求
c.「<websocket:stomp-endpoint path=“/websocket”>」注册一个websocket的endpoint，并采用stomp作为子协议，这个endpoint会在websocket handshake时用到（js中初始化websocket）
d.「<websocket:sockjs />」表示启用sockjs备用选项，以便在不支持websocket的浏览器端正常模拟出websocket的效果
e.「<websocket:simple-broker prefix="/topic, /queue" />」标明broker采用SimpleBroker，并定义broker请求对应的地址是topic和queue

    <websocket:message-broker application-destination-prefix="/app">
        <websocket:stomp-endpoint path="/init">
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:simple-broker prefix="/topic,/queue"/>
    </websocket:message-broker>
    -->


    <!--
        websocket4的配置
    -->
    <websocket:message-broker application-destination-prefix="/app" user-destination-prefix="/user">
        <websocket:stomp-endpoint path="/hello" allowed-origins="*">
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:simple-broker prefix="/topic,/user"/>
    </websocket:message-broker>


</beans>
